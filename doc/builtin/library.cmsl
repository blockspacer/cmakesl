namespace cmake {
/** \brief The builtin library type.
 *
 * This class is a kind of an accessor. If you create a copy of it (e.g. by
 * passing as a parameter to a function), it doesn't mean that another library
 * with the same name and sources is going to be created. Think of it as of a
 * implicit reference to the actual library object.
 */
class library
{
public:
  /** @return The name of the library.
   */
  string name();

  /** @brief Links the library to another library.
   *
   * Uses cmake::visibility::private.
   *
   * @param lib The library to be linked to.
   */
  void link_to(library lib);

  /** @brief Links the library to another library.
   *
   * @param lib The library to be linked to.
   * @param v The visibility.
   */
  void link_to(library lib, visibility v);

  /** @brief Adds dirs to the include path of the library.
   *
   * Uses cmake::visibility::private.
   *
   * @param dirs The paths to be added to the include path.
   */
  void include_directories(list<string> dirs);

  /** @brief Adds dirs to the include path of the library.
   *
   * @param dirs The paths to be added to the include path.
   * @param v The visibility.
   */
  void include_directories(list<string> dirs, visibility v);

  /** @brief Adds compile definitions of the library.
   *
   * Uses cmake::visibility::private.
   *
   * @param definitions The compile definitions to be added.
   */
  void compile_definitions(list<string> definitions);

  /** @brief Adds compile definitions of the library.
   *
   * @param definitions The compile definitions to be added.
   * @param v The visibility.
   */
  void compile_definitions(list<string> definitions, visibility v);

  /** @brief Adds compile options of the library.
   *
   * Uses cmake::visibility::private.
   *
   * @param options The compile definitions to be added.
   */
  void compile_options(list<string> options);

  /** @brief Adds compile options of the library.
   *
   * @param options The compile definitions to be added.
   * @param v The visibility.
   */
  void compile_options(list<string> options, visibility v);

  /** @brief Adds source files to be part of the library.
   *
   * Uses cmake::visibility::private.
   *
   * @param sources The files to be added.
   */
  void add_sources(list<string> sources);

  /** @brief Adds source files to be part of the library.
   *
   * @param sources The files to be added.
   * @param v The visibility.
   */
  void add_sources(list<string> sources, visibility v);
};
}
