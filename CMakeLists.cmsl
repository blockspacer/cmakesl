import "cmake/cmsl_directories.cmsl";

int main()
{
  cmake::minimum_required(cmake::version(3, 14));

  cmake::cxx_standard = cmake::cxx_standard_value::cpp_17;

  // Variables needed by old-style test CMakeLists. To be removed when tests
  // are implemented in CMakeSL.
  cmake::set_old_style_variable("CMAKESL_DIR", cmake::root_source_dir());
  cmake::set_old_style_variable("CMAKESL_SOURCES_DIR", cmsl::source_dir);
  cmake::set_old_style_variable("CMAKESL_TESTS_DIR", cmsl::test_dir);
  cmake::set_old_style_variable("CMAKESL_FACADE_DIR", cmsl::facade_dir);
  cmake::set_old_style_variable(
    "CMAKESL_GENERATED_PARENT_DIR",
    cmake::get_old_style_variable("CMAKE_CURRENT_BINARY_DIR"));

  if(cmake::get_system_info().id != cmake::system_id::windows) {
    cmake::set_old_style_variable("CMAKESL_ADDITIONAL_COMPILER_FLAGS", "-Wall;-Werror");
  }

  auto p = cmake::project("CMakeSL");

  add_subdirectory("source", p);

  auto with_tools =
    cmake::option("CMAKESL_WITH_TOOLS", "When ON, tools will be built", false);
  if (with_tools.value()) {
    add_subdirectory("tools", p);
  }

  auto with_examples = cmake::option("CMAKESL_WITH_EXAMPLES",
                                     "When ON, examples will be built", false);
  if (with_examples.value()) {
    if (!with_tools.value()) {
      cmake::fatal_error("Examples can not be built without tools support.");
    }

    auto cmsl_tools = p.find_library("cmsl_tools");
    add_subdirectory("examples", cmsl_tools);
  }

  auto with_tests =
    cmake::option("CMAKESL_WITH_TESTS", "When ON, tests will be built", false);
  if (with_tests.value()) {
    cmake::enable_ctest();
    add_subdirectory("external/googletest");
    add_subdirectory("test", p);
  }

  return 0;
}
